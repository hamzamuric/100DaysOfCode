{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.1","compilation":{"directory":[67,58,92,85,115,101,114,115,92,72,97,109,122,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,50],"program":"C:\\Users\\Hamza\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","autocfg","C:\\Users\\Hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\autocfg-0.1.2\\src\\lib.rs","--color","never","--crate-type","lib","--emit=dep-info,link","-C","debuginfo=2","-C","metadata=c3e45998252a5277","-C","extra-filename=-c3e45998252a5277","--out-dir","d:\\100DaysOfCode\\017\\HelloRust\\hello-rust\\target\\rls\\debug\\deps","-L","dependency=d:\\100DaysOfCode\\017\\HelloRust\\hello-rust\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Hamza\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":[100,58,92,49,48,48,68,97,121,115,79,102,67,111,100,101,92,48,49,55,92,72,101,108,108,111,82,117,115,116,92,104,101,108,108,111,45,114,117,115,116,92,116,97,114,103,101,116,92,114,108,115,92,100,101,98,117,103,92,100,101,112,115,92,108,105,98,97,117,116,111,99,102,103,45,99,51,101,52,53,57,57,56,50,53,50,97,53,50,55,55,46,114,108,105,98]},"prelude":{"crate_id":{"name":"autocfg","disambiguator":[373166482031216873,2303175212839213036]},"crate_root":"C:\\Users\\Hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\autocfg-0.1.2\\src","external_crates":[{"file_name":"C:\\Users\\Hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\autocfg-0.1.2\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[7528587287462463925,14365138709353428393]}},{"file_name":"C:\\Users\\Hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\autocfg-0.1.2\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[6961983669911787511,12763790138191559993]}},{"file_name":"C:\\Users\\Hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\autocfg-0.1.2\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[8881479335952209253,7175408585981261641]}},{"file_name":"C:\\Users\\Hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\autocfg-0.1.2\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[10606302774101958091,6394453555634565640]}},{"file_name":"C:\\Users\\Hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\autocfg-0.1.2\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[951275427296451120,15089112833676159407]}},{"file_name":"C:\\Users\\Hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\autocfg-0.1.2\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[16986482155481050220,8110678813127715211]}},{"file_name":"C:\\Users\\Hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\autocfg-0.1.2\\src\\lib.rs","num":7,"id":{"name":"rustc_demangle","disambiguator":[14152113043115722454,14996294870991823280]}},{"file_name":"C:\\Users\\Hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\autocfg-0.1.2\\src\\lib.rs","num":8,"id":{"name":"unwind","disambiguator":[16544231974546559170,12284481576050828670]}},{"file_name":"C:\\Users\\Hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\autocfg-0.1.2\\src\\lib.rs","num":9,"id":{"name":"backtrace_sys","disambiguator":[10490126003503044219,3700128015989034145]}},{"file_name":"C:\\Users\\Hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\autocfg-0.1.2\\src\\lib.rs","num":10,"id":{"name":"panic_unwind","disambiguator":[5553849915308501608,7293799346724567721]}}],"span":{"file_name":[67,58,92,85,115,101,114,115,92,72,97,109,122,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":0,"byte_end":8868,"line_start":1,"line_end":288,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":126},"span":{"file_name":[67,58,92,85,115,101,114,115,92,72,97,109,122,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1404,"byte_end":1409,"line_start":48,"line_end":48,"column_start":16,"column_end":21},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[67,58,92,85,115,101,114,115,92,72,97,109,122,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":0,"byte_end":8868,"line_start":1,"line_end":288,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Hamza\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\autocfg-0.1.2\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":22},{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":74},{"krate":0,"index":174},{"krate":0,"index":180},{"krate":0,"index":176},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":124}],"decl_id":null,"docs":" A Rust library for build scripts to automatically configure code based on\n compiler support.  Code snippets are dynamically tested to see if the `rustc`\n will accept them, rather than hard-coding specific version support.","sig":null,"attributes":[{"value":"deny(missing_debug_implementations)","span":{"file_name":[67,58,92,85,115,101,114,115,92,72,97,109,122,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1182,"byte_end":1221,"line_start":37,"line_end":37,"column_start":1,"column_end":40}},{"value":"deny(missing_docs)","span":{"file_name":[67,58,92,85,115,101,114,115,92,72,97,109,122,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1222,"byte_end":1244,"line_start":38,"line_end":38,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":126},"span":{"file_name":[67,58,92,85,115,101,114,115,92,72,97,109,122,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,50,92,115,114,99,92,101,114,114,111,114,46,114,115],"byte_start":9019,"byte_end":9024,"line_start":9,"line_end":9,"column_start":12,"column_end":17},"name":"Error","qualname":"::error::Error","value":"Error {  }","parent":null,"children":[{"krate":0,"index":29}],"decl_id":null,"docs":" A common error type for the `autocfg` crate.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":174},"span":{"file_name":[67,58,92,85,115,101,114,115,92,72,97,109,122,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1582,"byte_end":1589,"line_start":58,"line_end":58,"column_start":12,"column_end":19},"name":"AutoCfg","qualname":"::AutoCfg","value":"AutoCfg {  }","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":71},{"krate":0,"index":73},{"krate":0,"index":75}],"decl_id":null,"docs":" Helper to detect compiler features for `cfg` output in build scripts.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":76},"span":{"file_name":[67,58,92,85,115,101,114,115,92,72,97,109,122,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1870,"byte_end":1874,"line_start":70,"line_end":70,"column_start":8,"column_end":12},"name":"emit","qualname":"::emit","value":"fn (cfg: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Writes a config flag for rustc on standard out.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":78},"span":{"file_name":[67,58,92,85,115,101,114,115,92,72,97,109,122,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2210,"byte_end":2220,"line_start":80,"line_end":80,"column_start":8,"column_end":18},"name":"rerun_path","qualname":"::rerun_path","value":"fn (path: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Writes a line telling Cargo to rerun the build script if `path` changes.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":80},"span":{"file_name":[67,58,92,85,115,101,114,115,92,72,97,109,122,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2598,"byte_end":2607,"line_start":91,"line_end":91,"column_start":8,"column_end":17},"name":"rerun_env","qualname":"::rerun_env","value":"fn (var: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Writes a line telling Cargo to rerun the build script if the environment\n variable `var` changes.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":82},"span":{"file_name":[67,58,92,85,115,101,114,115,92,72,97,109,122,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2790,"byte_end":2793,"line_start":100,"line_end":100,"column_start":8,"column_end":11},"name":"new","qualname":"::new","value":"fn () -> AutoCfg","parent":null,"children":[],"decl_id":null,"docs":" Create a new `AutoCfg` instance.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":[67,58,92,85,115,101,114,115,92,72,97,109,122,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":3165,"byte_end":3168,"line_start":113,"line_end":113,"column_start":12,"column_end":15},"name":"new","qualname":"<AutoCfg>::new","value":"fn () -> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `AutoCfg` instance.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":[67,58,92,85,115,101,114,115,92,72,97,109,122,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":3669,"byte_end":3677,"line_start":128,"line_end":128,"column_start":12,"column_end":20},"name":"with_dir","qualname":"<AutoCfg>::with_dir","value":"fn <T> (dir: T) -> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `AutoCfg` instance with the specified output directory.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":[67,58,92,85,115,101,114,115,92,72,97,109,122,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":4510,"byte_end":4529,"line_start":150,"line_end":150,"column_start":12,"column_end":31},"name":"probe_rustc_version","qualname":"<AutoCfg>::probe_rustc_version","value":"fn (&self, major: usize, minor: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the current `rustc` reports a version greater than\n or equal to \"`major`.`minor`\".\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":[67,58,92,85,115,101,114,115,92,72,97,109,122,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":4789,"byte_end":4807,"line_start":156,"line_end":156,"column_start":12,"column_end":30},"name":"emit_rustc_version","qualname":"<AutoCfg>::emit_rustc_version","value":"fn (&self, major: usize, minor: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets a `cfg` value of the form `rustc_major_minor`, like `rustc_1_29`,\n if the current `rustc` is at least that version.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":[67,58,92,85,115,101,114,115,92,72,97,109,122,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":6227,"byte_end":6237,"line_start":202,"line_end":202,"column_start":12,"column_end":22},"name":"probe_path","qualname":"<AutoCfg>::probe_path","value":"fn (&self, path: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the given path can be used.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":[67,58,92,85,115,101,114,115,92,72,97,109,122,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":6546,"byte_end":6559,"line_start":210,"line_end":210,"column_start":12,"column_end":25},"name":"emit_has_path","qualname":"<AutoCfg>::emit_has_path","value":"fn (&self, path: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Emits a config value `has_PATH` if `probe_path` returns true.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":[67,58,92,85,115,101,114,115,92,72,97,109,122,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":6762,"byte_end":6775,"line_start":217,"line_end":217,"column_start":12,"column_end":25},"name":"emit_path_cfg","qualname":"<AutoCfg>::emit_path_cfg","value":"fn (&self, path: &str, cfg: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Emits the given `cfg` value if `probe_path` returns true.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":[67,58,92,85,115,101,114,115,92,72,97,109,122,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":7103,"byte_end":7114,"line_start":230,"line_end":230,"column_start":12,"column_end":23},"name":"probe_trait","qualname":"<AutoCfg>::probe_trait","value":"fn (&self, name: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the given trait can be used.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":[67,58,92,85,115,101,114,115,92,72,97,109,122,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":7465,"byte_end":7479,"line_start":239,"line_end":239,"column_start":12,"column_end":26},"name":"emit_has_trait","qualname":"<AutoCfg>::emit_has_trait","value":"fn (&self, name: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Emits a config value `has_TRAIT` if `probe_trait` returns true.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":[67,58,92,85,115,101,114,115,92,72,97,109,122,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":7684,"byte_end":7698,"line_start":246,"line_end":246,"column_start":12,"column_end":26},"name":"emit_trait_cfg","qualname":"<AutoCfg>::emit_trait_cfg","value":"fn (&self, name: &str, cfg: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Emits the given `cfg` value if `probe_trait` returns true.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":[67,58,92,85,115,101,114,115,92,72,97,109,122,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":8015,"byte_end":8025,"line_start":259,"line_end":259,"column_start":12,"column_end":22},"name":"probe_type","qualname":"<AutoCfg>::probe_type","value":"fn (&self, name: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the given type can be used.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":[67,58,92,85,115,101,114,115,92,72,97,109,122,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":8361,"byte_end":8374,"line_start":268,"line_end":268,"column_start":12,"column_end":25},"name":"emit_has_type","qualname":"<AutoCfg>::emit_has_type","value":"fn (&self, name: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Emits a config value `has_TYPE` if `probe_type` returns true.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":[67,58,92,85,115,101,114,115,92,72,97,109,122,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":8577,"byte_end":8590,"line_start":275,"line_end":275,"column_start":12,"column_end":25},"name":"emit_type_cfg","qualname":"<AutoCfg>::emit_type_cfg","value":"fn (&self, name: &str, cfg: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Emits the given `cfg` value if `probe_type` returns true.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,72,97,109,122,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,50,92,115,114,99,92,101,114,114,111,114,46,114,115],"byte_start":9073,"byte_end":9078,"line_start":13,"line_end":13,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":36},{"krate":0,"index":38}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,72,97,109,122,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,50,92,115,114,99,92,101,114,114,111,114,46,114,115],"byte_start":9441,"byte_end":9446,"line_start":28,"line_end":28,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,72,97,109,122,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,50,92,115,114,99,92,118,101,114,115,105,111,110,46,114,115],"byte_start":10572,"byte_end":10579,"line_start":15,"line_end":15,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":70},{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,72,97,109,122,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2845,"byte_end":2852,"line_start":104,"line_end":104,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[67,58,92,85,115,101,114,115,92,72,97,109,122,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,50,92,115,114,99,92,101,114,114,111,114,46,114,115],"byte_start":9073,"byte_end":9078,"line_start":13,"line_end":13,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":126},"to":{"krate":1,"index":2464}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,72,97,109,122,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,50,92,115,114,99,92,101,114,114,111,114,46,114,115],"byte_start":9441,"byte_end":9446,"line_start":28,"line_end":28,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":126},"to":{"krate":2,"index":8156}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,72,97,109,122,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,50,92,115,114,99,92,118,101,114,115,105,111,110,46,114,115],"byte_start":10572,"byte_end":10579,"line_start":15,"line_end":15,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":138},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,72,97,109,122,97,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,97,117,116,111,99,102,103,45,48,46,49,46,50,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2845,"byte_end":2852,"line_start":104,"line_end":104,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":174},"to":{"krate":4294967295,"index":4294967295}}]}